sw1
Imports System
Imports System.Data.Entity

' Base class
Public Class Person
    Public Property Id As Integer
    Public Property Name As String
End Class

' Derived class: Student
Public Class Student
    Inherits Person
    Public Property Grade As String
End Class

' Derived class: Teacher
Public Class Teacher
    Inherits Person
    Public Property Subject As String
End Class

' Entity Framework context
Public Class SchoolDbContext
    Inherits DbContext

    Public Property People As DbSet(Of Person)
End Class

Module Module1
    Sub Main()

        Database.SetInitializer(New DropCreateDatabaseIfModelChanges(Of SchoolDbContext)())

        Using db As New SchoolDbContext()

            db.People.Add(New Student With {.Name = "David", .Grade = "10"})
            db.People.Add(New Student With {.Name = "Ella", .Grade = "11"})
            db.People.Add(New Student With {.Name = "Faye", .Grade = "12"})
            db.People.Add(New Student With {.Name = "Gino", .Grade = "10"})
            db.People.Add(New Student With {.Name = "Mia", .Grade = "9"})
            db.People.Add(New Student With {.Name = "Lance", .Grade = "11"})

            db.People.Add(New Teacher With {.Name = "Sir Leo", .Subject = "Math"})
            db.People.Add(New Teacher With {.Name = "Ma'am Joy", .Subject = "Science"})
            db.People.Add(New Teacher With {.Name = "Sir Carlo", .Subject = "History"})
            db.People.Add(New Teacher With {.Name = "Ma'am Tess", .Subject = "English"})

            db.SaveChanges()
            Console.WriteLine("Data saved." & vbCrLf)

            Console.WriteLine("People List:")
            For Each person In db.People.ToList()
                If TypeOf person Is Student Then
                    Dim s = CType(person, Student)
                    Console.WriteLine($"Student: {s.Name}, Grade: {s.Grade}")
                ElseIf TypeOf person Is Teacher Then
                    Dim t = CType(person, Teacher)
                    Console.WriteLine($"Teacher: {t.Name}, Subject: {t.Subject}")
                End If
            Next

        End Using

        Console.WriteLine(vbCrLf & "Press any key to exit.")
        Console.ReadLine()
    End Sub
End Module



-------
sw2
Imports System
Imports System.Data.Entity

' Customer class
Public Class Customer
    Public Property Id As Integer
    Public Property Name As String
    Public Property Email As String
End Class

' EF DbContext
Public Class AppDbContext
    Inherits DbContext
    Public Property Customers As DbSet(Of Customer)
End Class

Module Module1
    Sub Main()
        ' Auto-create DB if needed
        Database.SetInitializer(New DropCreateDatabaseIfModelChanges(Of AppDbContext)())

        Using db As New AppDbContext()

            ' Clear old data (optional if rerunning multiple times)
            db.Customers.RemoveRange(db.Customers)
            db.SaveChanges()

            ' Add 10 customers
            Dim customers As New List(Of Customer) From {
                New Customer With {.Name = "Maria", .Email = "maria@example.com"},
                New Customer With {.Name = "Juan", .Email = "juan@example.com"},
                New Customer With {.Name = "Ana", .Email = "ana@example.com"},
                New Customer With {.Name = "Ben", .Email = "ben@example.com"},
                New Customer With {.Name = "Chloe", .Email = "chloe@example.com"},
                New Customer With {.Name = "Dante", .Email = "dante@example.com"},
                New Customer With {.Name = "Ella", .Email = "ella@example.com"},
                New Customer With {.Name = "Fred", .Email = "fred@example.com"},
                New Customer With {.Name = "Grace", .Email = "grace@example.com"},
                New Customer With {.Name = "Hugo", .Email = "hugo@example.com"}
            }

            db.Customers.AddRange(customers)
            db.SaveChanges()

   
            Dim maria = db.Customers.FirstOrDefault(Function(c) c.Name = "Maria")
            If maria IsNot Nothing Then
                maria.Email = "maria.updated@example.com"
            End If

            ' --- Delete Juan ---
            Dim juan = db.Customers.FirstOrDefault(Function(c) c.Name = "Juan")
            If juan IsNot Nothing Then
                db.Customers.Remove(juan)
            End If

            db.SaveChanges()

            ' --- Display all remaining customers ---
            Console.WriteLine("ðŸ”¹ Customer List:")
            For Each c In db.Customers.ToList()
                Console.WriteLine($"ID: {c.Id}, Name: {c.Name}, Email: {c.Email}")
            Next

        End Using

        Console.WriteLine(vbCrLf & "Press any key to exit.")
        Console.ReadLine()
    End Sub
End Module
